package innui.web3j.generated.contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.9.4.
 */
@SuppressWarnings("rawtypes")
public class Bases extends Contract {
    public static final String BINARY = "60806040526001805460ff1916811790553480156200001d57600080fd5b506040805160808101825260606020808301828152600084860152828401929092523383528351808501855260048152631c9bdbdd60e21b918101919091529052905169726f6f745f636c61766560b01b8152600290600a01602060405180830381855afa15801562000094573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190620000b991906200023f565b6040828101919091528051600180825281830190925290602080830190803683375050506060820181905280516d7065726d69736f5f6d6178696d6f60901b91906000906200010c576200010c6200026f565b60209081029190910181019190915260008054600181018255908052825160049091027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563810180546001600160a01b039093166001600160a01b03199093169290921782559183015183927f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5640190620001a6908262000314565b506040820151600282015560608201518051620001ce916003840191602090910190620001d8565b50505050620003e0565b82805482825590600052602060002090810192821562000216579160200282015b8281111562000216578251825591602001919060010190620001f9565b506200022492915062000228565b5090565b5b8082111562000224576000815560010162000229565b6000602082840312156200025257600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600181811c908216806200029a57607f821691505b602082108103620002bb57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200030f57600081815260208120601f850160051c81016020861015620002ea5750805b601f850160051c820191505b818110156200030b57828155600101620002f6565b5050505b505050565b81516001600160401b0381111562000330576200033062000259565b620003488162000341845462000285565b84620002c1565b602080601f831160018114620003805760008415620003675750858301515b600019600386901b1c1916600185901b1785556200030b565b600085815260208120601f198616915b82811015620003b15788860151825594840194600190910190840162000390565b5085821015620003d05787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b611ccb80620003f06000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80638fecb750116100a2578063d3a41ac511610071578063d3a41ac51461020e578063e3dbc94414610221578063e958108314610234578063f653ea1314610254578063f9d06c4d1461026757600080fd5b80638fecb750146101d8578063b776a7a2146101eb578063c49c3d05146101f3578063cdc87935146101fb57600080fd5b8063688e3467116100de578063688e34671461017657806379ad29d7146101905780637b318b6e146101a35780638e3ee7ba146101b657600080fd5b80630beef324146101105780631d032d01146101255780632dd47cac1461014b5780634dc4643714610153575b600080fd5b61012361011e3660046114c9565b61027a565b005b610138610133366004611562565b6104b6565b6040519081526020015b60405180910390f35b61012361052f565b610166610161366004611562565b61056c565b6040519015158152602001610142565b6001546101839060ff1681565b6040516101429190611584565b61016661019e3660046115ac565b6105d4565b6101236101b13660046115d6565b610691565b6101c96101c436600461165b565b6108b0565b604051610142939291906116c4565b6101666101e63660046116f8565b610978565b6101236109db565b610123610a12565b6101236102093660046116f8565b610a4b565b61016661021c3660046116f8565b610cbb565b61012361022f366004611746565b610d02565b61024761024236600461165b565b610e6a565b60405161014291906117ba565b6101666102623660046117fe565b610fae565b610123610275366004611562565b61105c565b336102848161056c565b6102a95760405162461bcd60e51b81526004016102a090611842565b60405180910390fd5b6000805b60005481101561030957600081815481106102ca576102ca611889565b60009182526020909120600490910201546001600160a01b03908116908816036102f75760019150610309565b6103028160016118b5565b90506102ad565b81156103755760405162461bcd60e51b815260206004820152603560248201527f4573612064697265636369c3b36e2064652061646d696e6973747261646f722060448201527403cb09032b9ba61d0903932b3b4b9ba3930b230971605d1b60648201526084016102a0565b604080516080810182526000818301526060808201526001600160a01b03891681526020810188905290516002906103ae9088906118c8565b602060405180830381855afa1580156103cb573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906103ee91906118e4565b6040820152606081018590526000805460018101825590805281517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563600490920291820180546001600160a01b0319166001600160a01b03909216919091178155602083015183927f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56401906104839082611982565b5060408201516002820155606082015180516104a9916003840191602090910190611271565b5050505050505050505050565b600080805b60005481101561051757600081815481106104d8576104d8611889565b60009182526020909120600490910201546001600160a01b03908116908516036105055760019150610517565b6105108160016118b5565b90506104bb565b8115610524579392505050565b506000199392505050565b336105398161056c565b6105555760405162461bcd60e51b81526004016102a090611842565b600180546000919060ff191681835b021790555050565b600080805b6000548110156105cd576000818154811061058e5761058e611889565b60009182526020909120600490910201546001600160a01b03908116908516036105bb57600191506105cd565b6105c68160016118b5565b9050610571565b5092915050565b600080806105e1856104b6565b9050600080808312610684575081905060005b6000828154811061060757610607611889565b90600052602060002090600402016003018054905081101561068457856000838154811061063757610637611889565b9060005260206000209060040201600301828154811061065957610659611889565b9060005260206000200154036106725760019350610684565b61067d8160016118b5565b90506105f4565b5091925050505b92915050565b60405163fc09a9e560e01b81526d7065726d69736f5f6d6178696d6f60901b6004820181905290339060609073__$7ec7f4c52dcf223f6588a2b806fc4fdb5b$__9063fc09a9e590602401600060405180830381865af41580156106f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107219190810190611a42565b905061072d82846105d4565b8160405160200161073e9190611ab9565b6040516020818303038152906040529061076b5760405162461bcd60e51b81526004016102a09190611b36565b506000610777886104b6565b9050600081121561079a5760405162461bcd60e51b81526004016102a090611b49565b8651156107d45786600082815481106107b5576107b5611889565b906000526020600020906004020160010190816107d29190611982565b505b855115610854576002866040516107eb91906118c8565b602060405180830381855afa158015610808573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061082b91906118e4565b6000828154811061083e5761083e611889565b9060005260206000209060040201600201819055505b6001600160a01b038516156108a657846000828154811061087757610877611889565b6000918252602090912060049091020180546001600160a01b0319166001600160a01b03929092169190911790555b5050505050505050565b600081815481106108c057600080fd5b6000918252602090912060049091020180546001820180546001600160a01b039092169350906108ef906118fd565b80601f016020809104026020016040519081016040528092919081815260200182805461091b906118fd565b80156109685780601f1061093d57610100808354040283529160200191610968565b820191906000526020600020905b81548152906001019060200180831161094b57829003601f168201915b5050505050908060020154905083565b8051600090600190825b818110156109d1576109ad868683815181106109a0576109a0611889565b60200260200101516105d4565b15156000036109bf57600092506109d1565b6109ca8160016118b5565b9050610982565b5090949350505050565b336109e58161056c565b610a015760405162461bcd60e51b81526004016102a090611842565b60018054819060ff19168180610564565b33610a1c8161056c565b610a385760405162461bcd60e51b81526004016102a090611842565b600180546002919060ff19168183610564565b33610a558161056c565b610a715760405162461bcd60e51b81526004016102a090611842565b6000610a7c846104b6565b90506000811215610a9f5760405162461bcd60e51b81526004016102a090611b49565b6000805b8451821015610b87576d7065726d69736f5f6d6178696d6f60901b858381518110610ad057610ad0611889565b602002602001015103610b75576000610afa336d7065726d69736f5f6d6178696d6f60901b6105d4565b905080610b6f5760405162461bcd60e51b815260206004820152603e60248201527f4e6f20707565646520706f6e6572207065726d69736f5f6d6178696d6f3b207360448201527f6920717569656e206c6f20706964652c206e6f206c6f20706f7365652e20000060648201526084016102a0565b50610b87565b610b808260016118b5565b9150610aa3565b610ba2866d7065726d69736f5f6d6178696d6f60901b6105d4565b15610c6f57610bc2336d7065726d69736f5f6d6178696d6f60901b6105d4565b15610bcf57506001610c73565b60405162461bcd60e51b815260206004820152606360248201527f536f6c6f20756e2061646d696e6973747261646f7220636f6e207065726d697360448201527f6f5f6d6178696d6f20707565646520646172207065726d69736f73206120756e60648201527f2061646d696e6973747261646f7220636f6e207065726d69736f5f6d6178696d60848201526203797160ed1b60a482015260c4016102a0565b5060015b8015610cb3578460008481548110610c8d57610c8d611889565b90600052602060002090600402016003019080519060200190610cb1929190611271565b505b505050505050565b80516000908190815b818110156109d157610ce2868683815181106109a0576109a0611889565b15610cf057600192506109d1565b610cfb8160016118b5565b9050610cc4565b33610d0c8161056c565b610d285760405162461bcd60e51b81526004016102a090611842565b336000610d34826104b6565b90506000811215610d575760405162461bcd60e51b81526004016102a090611b49565b855115610d91578560008281548110610d7257610d72611889565b90600052602060002090600402016001019081610d8f9190611982565b505b845115610e1157600285604051610da891906118c8565b602060405180830381855afa158015610dc5573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610de891906118e4565b60008281548110610dfb57610dfb611889565b9060005260206000209060040201600201819055505b6001600160a01b03841615610cb3578360008281548110610e3457610e34611889565b6000918252602090912060049091020180546001600160a01b0319166001600160a01b0392909216919091179055505050505050565b60606000821215610ec95760405162461bcd60e51b8152602060048201526024808201527f4c6120706f73696369c3b36e206e6f20707565646520736572206e656761746960448201526303b3097160e51b60648201526084016102a0565b60005480808412610f325760405162461bcd60e51b815260206004820152602d60248201527f4c6120706f73696369c3b36e20737570657261206c6f7320656c656d656e746f60448201526c039903232b61030b93930bc971609d1b60648201526084016102a0565b60008481548110610f4557610f45611889565b9060005260206000209060040201600301805480602002602001604051908101604052809291908181526020018280548015610fa057602002820191906000526020600020905b815481526020019060010190808311610f8c575b505050505092505050919050565b600080610fba846104b6565b90506000811215610fdd5760405162461bcd60e51b81526004016102a090611b49565b600283604051610fed91906118c8565b602060405180830381855afa15801561100a573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061102d91906118e4565b6000828154811061104057611040611889565b9060005260206000209060040201600201541491505092915050565b60405163fc09a9e560e01b81526d7065726d69736f5f6d6178696d6f60901b6004820181905290339060609073__$7ec7f4c52dcf223f6588a2b806fc4fdb5b$__9063fc09a9e590602401600060405180830381865af41580156110c4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110ec9190810190611a42565b90506110f882846105d4565b816040516020016111099190611ab9565b604051602081830303815290604052906111365760405162461bcd60e51b81526004016102a09190611b36565b506000611142856104b6565b905060008112156111655760405162461bcd60e51b81526004016102a090611b49565b6000805461117590600190611b91565b8154811061118557611185611889565b9060005260206000209060040201600082815481106111a6576111a6611889565b60009182526020909120825460049092020180546001600160a01b0319166001600160a01b039092169190911781556001808201906111e790840182611ba4565b506002820154816002015560038201816003019080546112089291906112bc565b50905050600080548061121d5761121d611c7f565b60008281526020812060046000199093019283020180546001600160a01b03191681559061124e60018301826112fc565b60028201600090556003820160006112669190611339565b505090555050505050565b8280548282559060005260206000209081019282156112ac579160200282015b828111156112ac578251825591602001919060010190611291565b506112b8929150611353565b5090565b8280548282559060005260206000209081019282156112ac5760005260206000209182015b828111156112ac5782548255916001019190600101906112e1565b508054611308906118fd565b6000825580601f10611318575050565b601f0160209004906000526020600020908101906113369190611353565b50565b508054600082559060005260206000209081019061133691905b5b808211156112b85760008155600101611354565b80356001600160a01b038116811461137f57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156113c3576113c3611384565b604052919050565b600067ffffffffffffffff8211156113e5576113e5611384565b50601f01601f191660200190565b600082601f83011261140457600080fd5b8135611417611412826113cb565b61139a565b81815284602083860101111561142c57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261145a57600080fd5b8135602067ffffffffffffffff82111561147657611476611384565b8160051b61148582820161139a565b928352848101820192828101908785111561149f57600080fd5b83870192505b848310156114be578235825291830191908301906114a5565b979650505050505050565b600080600080608085870312156114df57600080fd5b6114e885611368565b9350602085013567ffffffffffffffff8082111561150557600080fd5b611511888389016113f3565b9450604087013591508082111561152757600080fd5b611533888389016113f3565b9350606087013591508082111561154957600080fd5b5061155687828801611449565b91505092959194509250565b60006020828403121561157457600080fd5b61157d82611368565b9392505050565b60208101600383106115a657634e487b7160e01b600052602160045260246000fd5b91905290565b600080604083850312156115bf57600080fd5b6115c883611368565b946020939093013593505050565b600080600080608085870312156115ec57600080fd5b6115f585611368565b9350602085013567ffffffffffffffff8082111561161257600080fd5b61161e888389016113f3565b9450604087013591508082111561163457600080fd5b50611641878288016113f3565b92505061165060608601611368565b905092959194509250565b60006020828403121561166d57600080fd5b5035919050565b60005b8381101561168f578181015183820152602001611677565b50506000910152565b600081518084526116b0816020860160208601611674565b601f01601f19169290920160200192915050565b6001600160a01b03841681526060602082018190526000906116e890830185611698565b9050826040830152949350505050565b6000806040838503121561170b57600080fd5b61171483611368565b9150602083013567ffffffffffffffff81111561173057600080fd5b61173c85828601611449565b9150509250929050565b60008060006060848603121561175b57600080fd5b833567ffffffffffffffff8082111561177357600080fd5b61177f878388016113f3565b9450602086013591508082111561179557600080fd5b506117a2868287016113f3565b9250506117b160408501611368565b90509250925092565b6020808252825182820181905260009190848201906040850190845b818110156117f2578351835292840192918401916001016117d6565b50909695505050505050565b6000806040838503121561181157600080fd5b61181a83611368565b9150602083013567ffffffffffffffff81111561183657600080fd5b61173c858286016113f3565b60208082526027908201527f4c6120646972656363696f6e206e6f20657320646520756e2061646d696e69736040820152663a3930b237b91760c91b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561068b5761068b61189f565b600082516118da818460208701611674565b9190910192915050565b6000602082840312156118f657600080fd5b5051919050565b600181811c9082168061191157607f821691505b60208210810361193157634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561197d57600081815260208120601f850160051c8101602086101561195e5750805b601f850160051c820191505b81811015610cb35782815560010161196a565b505050565b815167ffffffffffffffff81111561199c5761199c611384565b6119b0816119aa84546118fd565b84611937565b602080601f8311600181146119e557600084156119cd5750858301515b600019600386901b1c1916600185901b178555610cb3565b600085815260208120601f198616915b82811015611a14578886015182559484019460019091019084016119f5565b5085821015611a325787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215611a5457600080fd5b815167ffffffffffffffff811115611a6b57600080fd5b8201601f81018413611a7c57600080fd5b8051611a8a611412826113cb565b818152856020838501011115611a9f57600080fd5b611ab0826020830160208601611674565b95945050505050565b7f4c6120646972656363696f6e206e6f20657320646520756e2061646d696e697381527f747261646f72206f206e6f207469656e6520656c207065726d69736f20736f6c602082015268034b1b4ba30b2379d160bd1b604082015260008251611b29816049850160208701611674565b9190910160490192915050565b60208152600061157d6020830184611698565b60208082526028908201527f4c6120646972656363696f6e206e6f20657320646520756e2061646d696e697360408201526703a3930b237b917160c51b606082015260800190565b8181038181111561068b5761068b61189f565b818103611baf575050565b611bb982546118fd565b67ffffffffffffffff811115611bd157611bd1611384565b611bdf816119aa84546118fd565b6000601f821160018114611c135760008315611bfb5750848201545b600019600385901b1c1916600184901b178455611c78565b600085815260209020601f19841690600086815260209020845b83811015611c4d5782860154825560019586019590910190602001611c2d565b5085831015611c6b5781850154600019600388901b60f8161c191681555b50505060018360011b0184555b5050505050565b634e487b7160e01b600052603160045260246000fdfea26469706673582212201309ed34b73816bd315a121dac2dbec8df28f3ae050f029f93e4141f656bc26464736f6c63430008110033";

    public static final String FUNC_ACL_ARRAY = "acl_array";

    public static final String FUNC_ACTIVAR = "activar";

    public static final String FUNC_ACTUALIZAR_ADMINISTRADOR_PERMISOS_ARRAY = "actualizar_administrador_permisos_array";

    public static final String FUNC_actualizar_administrador_usuario_clave_direccion = "actualizar_administrador_usuario_clave_direccion";

    public static final String FUNC_BORRAR_ADMINISTRADOR = "borrar_administrador";

    public static final String FUNC_COMPROBAR_CLAVE = "comprobar_clave";

    public static final String FUNC_CREAR_ADMINISTRADOR = "crear_administrador";

    public static final String FUNC_ESTADO = "estado";

    public static final String FUNC_INACTIVAR = "inactivar";

    public static final String FUNC_LEER_ADMINISTRADOR_PERMISOS_ARRAY = "leer_administrador_permisos_array";

    public static final String FUNC_LEER_ADMINISTRADOR_POS = "leer_administrador_pos";

    public static final String FUNC_LIMITAR = "limitar";

    public static final String FUNC_SER_ADMINISTRADOR = "ser_administrador";

    public static final String FUNC_SER_ADMINISTRADOR_CON_ALGUN_PERMISO = "ser_administrador_con_algun_permiso";

    public static final String FUNC_SER_ADMINISTRADOR_CON_PERMISO = "ser_administrador_con_permiso";

    public static final String FUNC_SER_ADMINISTRADOR_CON_TODO_PERMISO = "ser_administrador_con_todo_permiso";

    @Deprecated
    protected Bases(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Bases(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Bases(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Bases(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<Tuple3<String, String, byte[]>> acl_array(BigInteger param0) {
        final Function function = new Function(FUNC_ACL_ARRAY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}));
        return new RemoteFunctionCall<Tuple3<String, String, byte[]>>(function,
                new Callable<Tuple3<String, String, byte[]>>() {
                    @Override
                    public Tuple3<String, String, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, String, byte[]>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> activar() {
        final Function function = new Function(
                FUNC_ACTIVAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> actualizar_administrador_permisos_array(String direccion, List<byte[]> permisos_array) {
        final Function function = new Function(
                FUNC_ACTUALIZAR_ADMINISTRADOR_PERMISOS_ARRAY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(permisos_array, org.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> actualizar_administrador_usuario_clave_direccion(String direccion, String usuario, byte[] clave, String nueva_direccion) {
        final Function function = new Function(
                FUNC_actualizar_administrador_usuario_clave_direccion, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.Utf8String(usuario), 
                new org.web3j.abi.datatypes.DynamicBytes(clave), 
                new org.web3j.abi.datatypes.Address(160, nueva_direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> actualizar_administrador_usuario_clave_direccion(String usuario, byte[] clave, String nueva_direccion) {
        final Function function = new Function(
                FUNC_actualizar_administrador_usuario_clave_direccion, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(usuario), 
                new org.web3j.abi.datatypes.DynamicBytes(clave), 
                new org.web3j.abi.datatypes.Address(160, nueva_direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> borrar_administrador(String direccion) {
        final Function function = new Function(
                FUNC_BORRAR_ADMINISTRADOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> comprobar_clave(String direccion, byte[] clave) {
        final Function function = new Function(FUNC_COMPROBAR_CLAVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.DynamicBytes(clave)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> crear_administrador(String direccion, String usuario, byte[] clave, List<byte[]> permisos_array) {
        final Function function = new Function(
                FUNC_CREAR_ADMINISTRADOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.Utf8String(usuario), 
                new org.web3j.abi.datatypes.DynamicBytes(clave), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(permisos_array, org.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> estado() {
        final Function function = new Function(FUNC_ESTADO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> inactivar() {
        final Function function = new Function(
                FUNC_INACTIVAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> leer_administrador_permisos_array(BigInteger pos) {
        final Function function = new Function(FUNC_LEER_ADMINISTRADOR_PERMISOS_ARRAY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int256(pos)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> leer_administrador_pos(String direccion) {
        final Function function = new Function(FUNC_LEER_ADMINISTRADOR_POS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> limitar() {
        final Function function = new Function(
                FUNC_LIMITAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> ser_administrador(String direccion) {
        final Function function = new Function(FUNC_SER_ADMINISTRADOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> ser_administrador_con_algun_permiso(String direccion, List<byte[]> permisos_posibles_array) {
        final Function function = new Function(FUNC_SER_ADMINISTRADOR_CON_ALGUN_PERMISO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(permisos_posibles_array, org.web3j.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> ser_administrador_con_permiso(String direccion, byte[] permiso_necesario) {
        final Function function = new Function(FUNC_SER_ADMINISTRADOR_CON_PERMISO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.generated.Bytes32(permiso_necesario)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> ser_administrador_con_todo_permiso(String direccion, List<byte[]> permisos_exigidos_array) {
        final Function function = new Function(FUNC_SER_ADMINISTRADOR_CON_TODO_PERMISO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(permisos_exigidos_array, org.web3j.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    @Deprecated
    public static Bases load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Bases(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Bases load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Bases(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Bases load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Bases(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Bases load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Bases(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Bases> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Bases.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Bases> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Bases.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Bases> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Bases.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Bases> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Bases.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}
